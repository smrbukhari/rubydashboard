q
c
test
document.each do |key,value| test << value  end
document.each do |key,value| end
document.each do |key,value|
test = []
document
c
ss
c
ss
c
ss[0][0]
ss
c
ss[1]
ss[0]
ss[]
ss.first
ss
ss << recursive_keys_final(rr)
rr = JSON.parse(rr)
rr = collection_doc.first.to_json
c
rr = JSON.parse(rr)
rr = collection_doc.first.to_json
collection_doc.first
collection_doc.id
collection_doc._id
rr = collection_doc.as_json(:except => :_id).merge('_id' => collection_doc.id).to_json
collection_doc
rr
ss
c
cfv.first
cfv[0]
cfv
client[qq].find().each do |document| cfv << document end
cfv
cfv=[]
bb
client[qq].find().each do |document| bb=document end
b
client[qq].find().each do |document| b=document end
client[qq].first
client[qq][0]
client[qq].find().each
client[qq].each
client[qq]
c
column_first
c
column_first[0].split
column_first
c
column_first
c
q
columns = columnsfirst[0].split
columns = columnsfirst.split
columnsfirst = row.collect { |c| c.downcase.gsub(' ', '_') }
split_col = columns[0].split
columns = row.collect { |c| c.downcase.gsub(' ', '_') }
c
split_col = columns[0].split
columns = row.collect { |c| c.downcase.gsub(' ', '_') }
q
test[0].split
test[0]
test = ["id\tdate_time\tcpu_util\tcpu_idle\tcpu_top\tmem_usage"]
row
columns = row.collect { |c| c.downcase.gsub(' ', '_') }
q
columns = row.collect { |c| c.downcase.gsub(" ", "\t") }
columns = row.collect { |c| c.downcase.gsub("\t", '_') }
columns
columns = row.collect { |c| c.downcase.gsub(' ', '_') }
row.collect
columns
q
columns.first
columns[0]
columns(0)
columns
columns = row.collect { |c| c.downcase.gsub(' ', '_') }
row.collect
row
q
row
q
filedata
q
filedata
q
filedata.content_type
filedata
c
item
c
item
c
item
c
item
c
item
c
item
c
item
c
item
c
item
